import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

/**
 * In Self-Testing, the code should be tested against three different types, normal cases, boundary cases, and illegal cases.
 * <p>
 * However, since the current program does not perform the legality detection of the parameters and the description of the abnormalities, this test only performs simple routine tests.
 * <p>
 * This class contains 4 tests to test the function of the method coldest(double[] temperature) in class TemperatureTests.
 * <p>
 * Note: All the data is auto created by a Java program written by myself.
 * @author Zetian Qin zxq876
 * @version 2019-11-02 11:02:05
 */
public class TemperatureTests {

	public static final double TOLERANCE = 0.0000000001;

	@BeforeEach
	public void setup(TestInfo testInfo) {
		System.out.println("Start......" + testInfo.getDisplayName());
	}

	@Test
	@DisplayName("The Normal Data to test")
	public void test1() {
		double[] temperatures = {1.46, 0.33, 21.92, -2.17, -7.03, 8.27, -10.77, 42.51, -5.70, 43.23, -7.26, -8.97, -4.43, 6.57, 24.65, -6.23, -9.81, -9.64, 41.38, -0.80, 27.05, 23.85, -11.41, 38.16, 33.44, 1.79, -9.19, -10.59, 34.83, -13.22, 28.26, -9.93, 5.90, 6.22, -14.79, 36.25, 2.46, -2.89, 33.24, -7.33, -5.96, 44.79, -12.34, 35.33, -12.61, 19.24, -6.08, 41.71, -10.27, 36.13, -14.40, -12.93, 2.50, 29.20, 5.85, 31.74, -5.69, -4.48, 4.12, -9.02, -8.99, 42.81, 23.46, -12.78, 14.37, 19.04, 5.12, -12.19, -0.99, -3.07, 18.31, 40.06, -6.80, 8.27, 28.63, 11.34, -11.21, 8.38, 0.76, -7.96, -7.96, 9.75, 22.33, -5.03, -6.75, -2.31, 5.04, 41.29, 26.42, -0.82, 15.05, -5.56, 15.59, -11.11, 22.84, -6.47, -9.06, 31.46, 10.44, -12.13, 7.16, -14.29, 37.47, -7.64, -6.19, -3.11, 1.15, -2.95, -8.66, -9.40, -6.11, -8.40, 12.20, -5.46, -7.52, 35.17, 16.02, 27.10, -9.21, 6.88, 0.79, 5.50, 33.55, 7.18, -9.78, -1.06, -4.86, 44.25, -3.28, 6.17, -8.29, -12.89, 21.29, 36.60, -9.79, -8.25, -3.96, 32.63, 36.18, 20.43, 5.98, -5.93, -4.49, 19.93, 44.67, 22.65, 31.13, 29.61, -12.04, -10.03, -8.60, -9.56, 20.38, -11.16, -1.67, 29.95, -4.60, -5.67, -11.00, -2.26, 22.21, 21.10, 35.21, -13.50, 4.73, 33.33, 8.50, 8.37, 39.31, 24.47, -8.80, -4.53, -11.69, 24.00, 31.97, -11.18, 9.04, 8.97, 5.07, 4.77, 42.98, 3.73, 41.40, -14.66, 42.87, 17.27, 16.98, 35.73, -6.92, -4.12, -10.88, -7.00, -8.25, 6.29, -7.39, -11.53, 5.38, 5.58, -11.97, 26.55, 0.64, 22.23, -4.03, -13.57, 34.68, 39.62, -10.48, -8.98, -12.79, 16.19, 21.67, -14.11, 31.12, -10.79, -0.16, 2.42, 17.10, -5.55, -3.46, -11.67, 1.42, 16.16, 6.75, -6.19, -1.72, -13.89, -10.25, -8.56, -5.64, 31.58, -2.41, -11.05, -7.63, -10.06, -12.36, 24.59, -1.19, 22.42, 15.23, 5.40, 0.92, -4.67, 21.26, -14.08, -11.69, 32.51, -2.74, -4.35, 13.94, -0.15, -6.19, -2.25, 3.07, -9.04, 36.70, 34.93, 19.08, -9.58, 28.31, -8.73, 39.49, -6.96, -2.04, 3.94, 42.38, 16.87, -13.94, 14.48, -1.86, -9.82, 36.04, 28.56, 28.24, -10.61, 28.98, 44.88, 4.72, 7.66, 23.10, 13.62, 12.75, -9.16, -10.07, -14.07, 3.59, 42.18, -7.78, -9.01, 29.91, -7.54, 44.96, 27.73, 4.34, 35.26, -11.88, 6.95, 11.95, 17.76, -13.65, 35.40, 5.02, 28.16, 37.86, -14.62, -7.28, 32.90, 23.36, 12.60, 20.04, 24.42, -9.18, -12.74, 18.94, -3.50, 31.98, -5.63, -13.76, -2.68, 4.42, 6.55, -11.34, 9.85, -12.02, -13.24, -12.12, 10.07, 28.57, -8.28, -1.01, -4.64, 44.27, 12.24, 5.09, 31.16, -1.68, -8.04, 25.70, 0.72, 26.14, 17.38, 35.13, -0.51, -11.55, -8.24, 27.36, -0.59, 26.50, 6.98, 13.40, 5.77, 30.96, 31.38, -6.47, -0.65, -12.86, 7.70, 24.24, -11.79, -9.71, -3.10, -4.85, 30.30, -8.98, -8.33, 43.13};
		
		double expectedColdest = 1;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	@DisplayName("The Negative Data to test")
	public void test2() {
		double[] temperatures = {-2.75, -12.89, -6.50, -2.69, -5.82, -12.99, -9.77, -6.15, -2.46, -5.73, -7.55, -12.87, -5.64, -0.48, -2.22, -4.40, -2.91, -4.68, -4.88, -4.34, -5.27, -10.14, -0.28, -4.55, -5.09, -12.39, -11.05, -3.10, -4.80, -8.13, -4.41, -0.14, -3.86, -9.25, -3.56, -14.77, -6.75, -3.03, -2.21, -9.17, -5.67, -14.68, -3.90, -12.10, -0.40, -6.55, -6.56, -6.80, -9.47, -14.80, -4.83, -3.32, -1.70, -5.18, -13.81, -2.08, -1.80, -11.02, -4.37, -1.82, -5.81, -6.75, -14.65, -12.29, -14.51, -8.44, -8.50, -6.37, -13.17, -8.10, -13.78, -7.29, -11.34, -9.49, -1.14, -13.83, -9.36, -6.60, -0.72, -6.61, -7.90, -10.82, -9.17, -6.31, -5.55, -2.20, -4.57, -7.25, -10.81, -8.01, -9.91, -2.04, -14.00, -2.00, -11.01, -10.25, -2.29, -12.02, -3.78, -3.91, -1.58, -1.17, -0.54, -4.06, -1.45, -8.97, -12.40, -8.12, -5.90, -2.06, -7.03, -8.85, -6.58, -10.26, -2.85, -9.82, -1.90, -2.94, -11.40, -9.06, -12.09, -14.59, -3.05, -2.09, -13.02, -13.31, -10.92, -1.64, -7.51, -3.85, -9.01, -12.78, -9.93, -7.95, -8.11, -11.33, -5.01, -13.27, -3.66, -11.30, -6.64, -0.19, -6.67, -3.32, -14.26, -9.75, -9.19, -13.77, -4.23, -10.32, -7.85, -0.02, -0.61, -9.46, -12.51, -9.52, -11.87, -4.59, -0.18, -4.41, -12.59, -3.47, -6.68, -2.26, -13.15, -1.62, -14.75, -6.68, -2.16, -9.53, -1.73, -10.96, -6.64, -6.40, -14.25, -3.24, -13.35, -3.03, -14.00, -6.85, -4.96, -1.55, -9.42, -14.69, -11.70, -8.08, -7.52, -14.05, -8.37, -4.53, -3.20, -8.68, -11.54, -10.11, -9.13, -7.71, -6.72, -14.90, -13.46, -5.45, -3.70, -13.69, -11.51, -1.91, -1.20, -0.04, -14.00, -8.82, -12.86, -12.60, -14.24, -7.94, -9.64, -6.46, -5.35, -8.72, -10.68, -6.50, -2.12, -4.11, -13.42, -4.55, -12.32, -4.23, -4.69, -10.44, -7.15, -8.51, -11.67, -2.88, -13.03, -4.31, -6.54, -10.57, -9.33, -5.84, -6.99, -14.78, -14.38, -11.10, -2.38, -14.91, -0.99, -1.77, -1.36, -9.75, -8.42, -6.31, -2.92, -2.97, -3.67, -0.47, -4.14, -10.23, -9.29, -7.30, -12.21, -2.41, -7.90, -10.82, -8.16, -2.96, -0.36, -13.34, -10.81, -11.22, -2.53, -12.50, -14.50, -7.75, -8.71, -1.06, -0.60, -3.91, -9.30, -6.27, -9.76, -10.56, -2.54, -9.86, -14.58, -7.64, -1.78, -12.54, -8.63, -14.58, -13.23, -9.21, -14.50, -6.30, -12.82, -10.33, -14.71, -7.64, -5.32, -9.52, -2.42, -13.08, -3.27, -8.86, -12.42, -8.84, -2.30, -14.54, -1.75, -5.91, -5.21, -11.49, -8.99, -8.68, -6.27, -9.98, -1.05, -13.45, -6.75, -13.26, -12.92, -13.04, -2.38, -9.49, -4.00, -8.14, -4.79, -7.17, -14.46, -7.41, -14.13, -11.15, -1.37, -8.39, -5.48, -1.67, -1.55, -14.99, -13.52, -2.97, -11.46, -0.15, -8.08, -2.77, -5.67, -4.42, -12.60, -3.57, -7.64, -9.37, -12.99, -10.81, -12.29, -7.40, -12.78, -9.66, -6.83, -8.33, -2.11, -9.45, -0.79, -11.50, -13.86, -2.09, -8.73, -6.07, -0.37, -5.33, -10.59};

		double expectedColdest = 334;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@Test
	@DisplayName("The Positive Data to test")
	public void test3() {
		double[] temperatures = {39.59, 17.99, 21.79, 10.19, 27.10, 19.99, 37.91, 21.45, 17.72, 21.68, 27.84, 11.68, 0.27, 16.73, 36.75, 42.98, 11.51, 3.37, 26.07, 7.55, 27.70, 21.06, 41.36, 10.52, 22.92, 0.40, 34.80, 0.54, 17.17, 18.78, 44.70, 7.01, 14.74, 33.81, 37.27, 35.89, 0.25, 41.29, 19.86, 30.23, 26.25, 4.63, 19.14, 24.88, 2.97, 8.05, 16.96, 30.48, 40.43, 25.43, 23.65, 7.25, 16.11, 10.73, 5.27, 4.58, 39.57, 1.89, 21.41, 40.06, 26.20, 10.43, 7.53, 19.63, 13.65, 26.42, 23.12, 43.80, 33.23, 21.99, 33.89, 43.43, 21.62, 16.48, 19.17, 34.58, 31.74, 32.32, 11.07, 31.09, 33.54, 44.21, 2.97, 5.21, 0.19, 42.71, 27.64, 18.59, 4.12, 21.40, 24.69, 6.51, 0.31, 0.01, 11.81, 31.85, 13.25, 44.10, 38.57, 7.48, 27.84, 42.00, 13.77, 17.38, 12.67, 21.35, 3.17, 11.99, 27.38, 35.46, 22.03, 0.96, 26.31, 34.72, 42.41, 12.14, 17.55, 44.89, 11.33, 6.99, 37.94, 6.54, 38.29, 23.98, 10.80, 0.84, 36.14, 26.61, 33.99, 21.30, 23.32, 16.43, 36.02, 15.34, 17.25, 23.63, 3.36, 18.58, 31.03, 1.13, 1.99, 33.40, 8.87, 4.75, 23.57, 6.32, 2.02, 29.81, 9.12, 1.27, 4.69, 7.45, 6.39, 29.90, 35.14, 37.46, 18.03, 31.07, 12.24, 5.22, 28.00, 7.08, 43.68, 20.06, 20.25, 24.81, 5.17, 44.79, 39.24, 23.89, 33.75, 30.14, 30.45, 10.20, 8.21, 20.22, 4.58, 44.20, 10.92, 4.94, 12.31, 42.47, 29.01, 34.82, 33.75, 38.91, 35.93, 25.09, 35.80, 35.97, 7.64, 38.10, 40.56, 7.27, 23.15, 1.48, 38.58, 25.53, 30.65, 32.72, 11.88, 26.04, 27.07, 37.53, 44.49, 40.73, 29.87, 30.01, 20.26, 43.00, 9.72, 15.36, 44.36, 4.54, 6.87, 38.69, 42.26, 13.24, 8.52, 6.98, 42.23, 29.69, 31.06, 0.72, 20.29, 32.44, 29.37, 40.36, 30.12, 33.81, 34.32, 31.92, 31.35, 25.30, 33.70, 6.33, 1.29, 20.81, 12.87, 14.57, 15.40, 19.69, 3.61, 31.69, 22.13, 37.20, 9.64, 2.81, 14.90, 19.52, 11.31, 39.95, 29.93, 11.49, 15.19, 25.43, 22.82, 13.70, 34.46, 37.54, 27.17, 33.02, 3.47, 28.54, 35.57, 10.19, 5.53, 22.12, 25.33, 36.05, 11.81, 40.11, 19.47, 9.85, 32.68, 36.72, 35.81, 21.88, 32.64, 39.53, 8.90, 32.09, 10.80, 6.22, 13.79, 12.10, 15.50, 5.10, 32.79, 29.16, 43.09, 7.06, 26.97, 10.15, 33.43, 3.01, 2.20, 18.08, 21.00, 27.20, 1.67, 11.98, 28.85, 23.40, 3.48, 24.14, 26.58, 2.60, 29.31, 23.47, 43.14, 34.60, 21.44, 25.02, 5.80, 16.81, 13.48, 15.79, 44.59, 29.00, 1.90, 28.46, 30.59, 15.42, 16.32, 14.93, 30.39, 36.76, 28.93, 31.18, 9.42, 32.46, 17.46, 36.71, 29.15, 14.54, 23.98, 13.00, 40.99, 7.28, 24.38, 36.74, 38.94, 1.43, 3.09, 9.75, 4.48, 22.51, 24.13, 27.40, 35.08, 38.84, 5.84, 5.58, 23.46, 31.00, 35.14, 1.12, 9.32, 11.01, 42.13, 38.31, 14.68, 8.79, 8.97};
		
		double expectedColdest = 94;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}
	
	@Test
	@DisplayName("The Zero Data to test")
	public void	test4() {
		double[] temperatures = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		
		double expectedColdest = 1;
		double actualColdest = Temperature.coldest(temperatures);
		assertEquals(expectedColdest, actualColdest, TOLERANCE);
	}

	@AfterEach
	public void tearDown(TestInfo testInfo) {
		System.out.println("Finished..." + testInfo.getDisplayName());
	}
}
